/**
 * (c) Copyright 2018 Clause Inc., all rights reserved.
 */
/**
 * A business network to represent truck platooning
 * https://en.wikipedia.org/wiki/Platoon_(automobile)
 */
namespace io.clause.platoon

import io.clause.outbound.physical.* from github://clausehq/clause-model-library/master/physical/physical.cto
import io.clause.outbound.physical.payments.xero.* from github://clausehq/clause-model-library/master/physical/payments/xero.cto

concept Address {
  o String street
  o String city
  o String zip
  o String country
}

concept Location {
  o Double lat
  o Double long
}

concept Destination extends Location {
  o Address address optional
}

concept VehicleSpecification {
  o String make
  o String model
  o Integer year
  o Double brakingDistance // placeholders
}

/**
 * A vehicle being tracked. A vehicle can be in one of 3 states:
 * 1. The vehicle is not a platoon leader, and is not a member of a platoon
 * (platoon is null and platoonLeader is null)
 * 2. The vehicle is a platoon leader (platoon is not null, and platoonLeader is null)
 * 3. The vehicle is a member of a platoon (platoon is not null, platoonLeader is null)
 *
 * Vehicles have a current location as well as an optional destination.
 */
asset Vehicle identified by id {
  o String id

  /**
   * Technical specification for the vehicle
   */
  o VehicleSpecification vehicleSpecification

  /**
   * Current position of the vehicle
   */
  o Location location

  /**
   * Current destination for the contract
   */
  o Destination destination optional

  /**
   * If someone wants to form into a platoon with this vehicle, this is the vehicle's contract
   */
  o String platoonContractUrl

  /**
   * Vehicles that have formed into a platoon behind this vehicle
   * send their Join and Exit transactions to the leader for billing purposes.
   * Vehicles can be billed when they leave, when the leader arrives at their
   * destination, or on a schedule.
   */
    o VehicleTransaction[] vehicleTransactions optional

  /**
   * The ordered list of vehicles that are formed up behind this vehicle if this vehicle
   * is currently a platoon leader.
   */
    --> Vehicle[] platoon optional

  /**
   * The platoon leader for this vehicle, if this vehicle is currently in a platoon.
   */
    --> Vehicle platoonLeader optional
}

abstract transaction VehicleTransaction {
  --> Vehicle vehicle
}

/**
 * Update the position of a vehicle
 */
transaction VehicleMovement extends VehicleTransaction{
  o Location location
}

/**
 * Update the destination for a vehicle
 */
transaction VehicleUpdateDestination extends VehicleTransaction{
  o Destination destination
}

/**
 * A vehicle joins a platoon. This can fail if the contract for the leader rejects the vehicle
 * based on the state of the platoon, or the specifications of the vehicle trying to join
 */
transaction JoinPlatoon extends VehicleTransaction{
  --> Vehicle platoonLeader
}

/**
 * A vehicle exits a platoon
 */
transaction ExitPlatoon extends VehicleTransaction {
  --> Vehicle platoonLeader
  o Double distance 
}

/**
 * Returned from a EndPlatoon transaction
 */
transaction FeeCalculations extends VehicleTransaction {
  o Double feePerKm
  o Double totalDistance
}

/**
 * The template model
 */
@AccordTemplateModel("platooning-ride")
concept TemplateModel {
  o Double monthlyFee
  o Double leaderFeePerKm
  o Double highAutomationFeePerKm
}
